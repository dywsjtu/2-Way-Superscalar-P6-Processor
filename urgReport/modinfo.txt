===============================================================================
Module : testbench
===============================================================================
SCORE  LINE   COND   TOGGLE BRANCH 
 55.71  90.88 --      20.54 --     

Source File(s) : 

/afs/umich.edu/user/t/o/tonyztc/Desktop/group17w22/testbench/test_rob.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE BRANCH NAME      
 55.71  90.88 --      20.54 --     testbench 



-------------------------------------------------------------------------------
Line Coverage for Module : testbench

             Line No.   Total   Covered  Percent
TOTAL                      296      269    90.88
ALWAYS             46        2        2   100.00
ROUTINE            61       40       13    32.50
INITIAL           119      254      254   100.00

45                      
46         2/2              always #5 clock = ~clock;
47                      
48                          task check;
49                              input ID_ROB_PACKET   id_rob;
50                              input RS_ROB_PACKET   rs_rob;
51                              input FU_ROB_PACKET   fu_rob;
52                              // input logic           rob_full;
53                              input ROB_RS_PACKET   rob_rs;
54                              input ROB_MT_PACKET   rob_mt;
55                              input ROB_REG_PACKET  rob_reg;
56                              input ROB_RS_PACKET   gt_rob_rs;
57                              input ROB_MT_PACKET   gt_rob_mt;
58                              input ROB_REG_PACKET  gt_rob_reg;
59                              begin
60                                  logic   flag;
61         1/1                      flag = 1'b0;
62         1/1                      if (rob_rs.rob_tail != gt_rob_rs.rob_tail) begin
63         0/1     ==>                  $display("@@@ Incorrect rob_rs.rob_tail at time %4.0f", $time);
64         0/1     ==>                  flag = 1'b1;
65                                  end
                        MISSING_ELSE
66         1/1                      if (rob_rs.value1 != gt_rob_rs.value1) begin
67         0/1     ==>                  $display("@@@ Incorrect rob_rs.value1 at time %4.0f", $time);
68         0/1     ==>                  flag = 1'b1;
69                                  end
                        MISSING_ELSE
70         1/1                      if (rob_rs.value2 != gt_rob_rs.value2) begin
71         0/1     ==>                  $display("@@@ Incorrect rob_rs.value2 at time %4.0f", $time);
72         0/1     ==>                  flag = 1'b1;
73                                  end
                        MISSING_ELSE
74         1/1                      if (rob_rs.squash != gt_rob_rs.squash) begin
75         0/1     ==>                  $display("@@@ Incorrect rob_rs.squash at time %4.0f", $time);
76         0/1     ==>                  flag = 1'b1;
77                                  end
                        MISSING_ELSE
78         1/1                      if (rob_mt.rob_tail != gt_rob_mt.rob_tail) begin
79         0/1     ==>                  $display("@@@ Incorrect rob_mt.rob_tail at time %4.0f", $time);
80         0/1     ==>                  flag = 1'b1;
81                                  end
                        MISSING_ELSE
82         1/1                      if (rob_mt.squash != gt_rob_mt.squash) begin
83         0/1     ==>                  $display("@@@ Incorrect rob_mt.squash at time %4.0f", $time);
84         0/1     ==>                  flag = 1'b1;
85                                  end
                        MISSING_ELSE
86         1/1                      if (rob_reg.dest_valid != gt_rob_reg.dest_valid) begin
87         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_valid at time %4.0f", $time);
88         0/1     ==>                  flag = 1'b1;
89                                  end
                        MISSING_ELSE
90         1/1                      if (rob_reg.dest_reg_idx != gt_rob_reg.dest_reg_idx) begin
91         0/1     ==>                  $display("reg_idx", gt_rob_reg.dest_reg_idx);
92         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_reg_idx at time %4.0f", $time);
93         0/1     ==>                  flag = 1'b1;
94                                  end
                        MISSING_ELSE
95         1/1                      if (rob_reg.dest_value != gt_rob_reg.dest_value) begin
96         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_value at time %4.0f", $time);
97         0/1     ==>                  flag = 1'b1;
98                                  end
                        MISSING_ELSE
99                      
100        2/2                      #1;
101        1/1                      if (flag) begin
102        0/1     ==>                  $display("id_rob:  %p", id_rob);
103        0/1     ==>                  $display("rs_rob:  %p", rs_rob);
104        0/1     ==>                  $display("fu_rob:  %p", fu_rob);
105        0/1     ==>                  $display("rob_rs:  %p", rob_rs);
106        0/1     ==>                  $display("rob_mt:  %p", rob_mt);
107        0/1     ==>                  $display("rob_reg: %p", rob_reg);
108                     
109        0/1     ==>                  $display("@@@ Failed at time %f", $time);
110        0/1     ==>                  $finish;
111                                 end
                        MISSING_ELSE
112                             end
113                         endtask
114                     
115                         assign gt_rob_mt.rob_tail       = gt_rob_rs.rob_tail;
116                         assign gt_rob_mt.squash         = gt_rob_rs.squash;
117                     
118                         initial begin
119        1/1                  $monitor("time: %3.0d head: %2.0d tail: %2.0d counter: %2.0d ", $time, rob_head, rob_tail, rob_counter);
120        1/1                  clock = 0;
121                     
122                             // reset
123        1/1                  reset                       = 1;
124        1/1                  id_rob.PC                   = `XLEN'b0;
125        1/1                  id_rob.dispatch_enable      = 1'b0;
126        1/1                  id_rob.dest_reg_idx         = 5'b0;
127        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
128        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
129        1/1                  fu_rob.completed            = 1'b0;
130        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
131        1/1                  fu_rob.value                = `XLEN'b0;
132        1/1                  fu_rob.mis_pred             = 1'b0;
133                     
134        1/1                  gt_rob_rs.rob_tail          = 5'b00000;
135        1/1                  gt_rob_rs.value1            = `XLEN'b0;
136        1/1                  gt_rob_rs.value2            = `XLEN'b0;
137        1/1                  gt_rob_rs.squash            = 1'b0;
138        1/1                  gt_rob_reg.dest_valid       = 1'b0;
139        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00000;
140        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
141                     
142        2/2                  @(negedge clock);
143        1/1                  reset = 0;
144        2/2                  @(negedge clock);
145                             // check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
146                             
147                             // fill rob 0
148        1/1                  id_rob.PC                   = `XLEN'b0;
149        1/1                  id_rob.dest_reg_idx         = 5'b00011;
150        1/1                  id_rob.dispatch_enable      = 1'b1;
151        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
152        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
153        1/1                  fu_rob.completed            = 1'b0;
154        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
155        1/1                  fu_rob.value                = `XLEN'b0;
156        1/1                  fu_rob.mis_pred             = 1'b0;
157                             
158        1/1                  gt_rob_rs.rob_tail          = 5'b1;
159        1/1                  gt_rob_rs.value1            = `XLEN'b0;
160        1/1                  gt_rob_rs.value2            = `XLEN'b0;
161        1/1                  gt_rob_rs.squash            = 1'b0;
162        1/1                  gt_rob_reg.dest_valid       = 1'b0;
163        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
164        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
165        2/2                  @(negedge clock);
166        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);        
167                             
168                             // fill rob 1
169        1/1                  id_rob.PC                   = `XLEN'b1;
170        1/1                  id_rob.dest_reg_idx         = 5'b00010;
171        1/1                  id_rob.dispatch_enable      = 1'b1;
172        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
173        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
174        1/1                  fu_rob.completed            = 1'b0;
175        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
176        1/1                  fu_rob.value                = `XLEN'b0;
177        1/1                  fu_rob.mis_pred             = 1'b0;
178                             
179        1/1                  gt_rob_rs.rob_tail          = 5'b00010;
180        1/1                  gt_rob_rs.value1            = `XLEN'b0;
181        1/1                  gt_rob_rs.value2            = `XLEN'b0;
182        1/1                  gt_rob_rs.squash            = 1'b0;
183        1/1                  gt_rob_reg.dest_valid       = 1'b0;
184        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
185        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
186        2/2                  @(negedge clock);
187        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
188                     
189                             // fill rob 2
190        1/1                  id_rob.PC                   = `XLEN'b10;
191        1/1                  id_rob.dest_reg_idx         = 5'b00100;
192        1/1                  id_rob.dispatch_enable      = 1'b1;
193        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
194        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
195        1/1                  fu_rob.completed            = 1'b0;
196        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
197        1/1                  fu_rob.value                = `XLEN'b0;
198        1/1                  fu_rob.mis_pred             = 1'b0;
199                             
200        1/1                  gt_rob_rs.rob_tail          = 5'b00011;
201        1/1                  gt_rob_rs.value1            = `XLEN'b0;
202        1/1                  gt_rob_rs.value2            = `XLEN'b0;
203        1/1                  gt_rob_rs.squash            = 1'b0;
204        1/1                  gt_rob_reg.dest_valid       = 1'b0;
205        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
206        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
207        2/2                  @(negedge clock);
208        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
209                     
210                             // fill rob 3
211        1/1                  id_rob.PC                   = `XLEN'b11;
212        1/1                  id_rob.dest_reg_idx         = 5'b01100;
213        1/1                  id_rob.dispatch_enable      = 1'b1;
214        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
215        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
216        1/1                  fu_rob.completed            = 1'b0;
217        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
218        1/1                  fu_rob.value                = `XLEN'b0;
219        1/1                  fu_rob.mis_pred             = 1'b0;
220                             
221        1/1                  gt_rob_rs.rob_tail          = 5'b00100;
222        1/1                  gt_rob_rs.value1            = `XLEN'b0;
223        1/1                  gt_rob_rs.value2            = `XLEN'b0;
224        1/1                  gt_rob_rs.squash            = 1'b0;
225        1/1                  gt_rob_reg.dest_valid       = 1'b0;
226        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
227        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
228        2/2                  @(negedge clock);
229        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
230                             
231                             // fill rob 4; complete rob 1
232        1/1                  id_rob.PC                   = `XLEN'b100;
233        1/1                  id_rob.dest_reg_idx         = 5'b10000;
234        1/1                  id_rob.dispatch_enable      = 1'b1;
235        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
236        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
237        1/1                  fu_rob.completed            = 1'b1;
238        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b1;
239        1/1                  fu_rob.value                = `XLEN'b01100;
240        1/1                  fu_rob.mis_pred             = 1'b0;
241                             
242        1/1                  gt_rob_rs.rob_tail          = 5'b00101;
243        1/1                  gt_rob_rs.value1            = `XLEN'b0;
244        1/1                  gt_rob_rs.value2            = `XLEN'b0;
245        1/1                  gt_rob_rs.squash            = 1'b0;
246        1/1                  gt_rob_reg.dest_valid       = 1'b0;
247        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
248        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
249        2/2                  @(negedge clock);
250        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
251                     
252                             // complete rob 0
253        1/1                  id_rob.PC                   = `XLEN'b100;
254        1/1                  id_rob.dest_reg_idx         = 5'b10000;
255        1/1                  id_rob.dispatch_enable      = 1'b0;
256        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b1;
257        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b10;
258        1/1                  fu_rob.completed            = 1'b1;
259        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
260        1/1                  fu_rob.value                = `XLEN'b1011;
261        1/1                  fu_rob.mis_pred             = 1'b0;
262                             
263        1/1                  gt_rob_rs.rob_tail          = 5'b00101;
264        1/1                  gt_rob_rs.value1            = `XLEN'b01100;
265        1/1                  gt_rob_rs.value2            = `XLEN'b0;
266        1/1                  gt_rob_rs.squash            = 1'b0;
267        1/1                  gt_rob_reg.dest_valid       = 1'b1;
268        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
269        1/1                  gt_rob_reg.dest_value       = `XLEN'b1011;
270        2/2                  @(negedge clock);
271        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
272                     
273                             // retire rob 0; fill rob 5
274        1/1                  id_rob.PC                   = `XLEN'b101;
275        1/1                  id_rob.dest_reg_idx         = 5'b01000;
276        1/1                  id_rob.dispatch_enable      = 1'b1;
277        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b10;
278        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b1;
279        1/1                  fu_rob.completed            = 1'b0;
280        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
281        1/1                  fu_rob.value                = `XLEN'b1011;
282        1/1                  fu_rob.mis_pred             = 1'b0;
283                             
284        1/1                  gt_rob_rs.rob_tail          = 5'b00110;
285        1/1                  gt_rob_rs.value1            = `XLEN'b0;
286        1/1                  gt_rob_rs.value2            = `XLEN'b01100;
287        1/1                  gt_rob_rs.squash            = 1'b0;
288        1/1                  gt_rob_reg.dest_valid       = 1'b1;
289        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00010;
290        1/1                  gt_rob_reg.dest_value       = `XLEN'b01100;
291        2/2                  @(negedge clock);
292        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
293                     
294                             // retire rob 1; fill rob 6
295        1/1                  id_rob.PC                   = `XLEN'b110;
296        1/1                  id_rob.dest_reg_idx         = 5'b11000;
297        1/1                  id_rob.dispatch_enable      = 1'b1;
298        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b10;
299        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b11;
300        1/1                  fu_rob.completed            = 1'b0;
301        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
302        1/1                  fu_rob.value                = `XLEN'b1011;
303        1/1                  fu_rob.mis_pred             = 1'b0;
304                             
305        1/1                  gt_rob_rs.rob_tail          = 5'b00111;
306        1/1                  gt_rob_rs.value1            = `XLEN'b0;
307        1/1                  gt_rob_rs.value2            = `XLEN'b0;
308        1/1                  gt_rob_rs.squash            = 1'b0;
309        1/1                  gt_rob_reg.dest_valid       = 1'b0;
310        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00100;
311        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
312        2/2                  @(negedge clock);
313        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
314                     
315                             // fill rob 7
316        1/1                  id_rob.PC                   = `XLEN'b111;
317        1/1                  id_rob.dest_reg_idx         = 5'b00011;
318        1/1                  id_rob.dispatch_enable      = 1'b1;
319        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b10;
320        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b11;
321        1/1                  fu_rob.completed            = 1'b0;
322        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
323        1/1                  fu_rob.value                = `XLEN'b0;
324        1/1                  fu_rob.mis_pred             = 1'b0;
325                             
326        1/1                  gt_rob_rs.rob_tail          = 5'b00000;
327        1/1                  gt_rob_rs.value1            = `XLEN'b0;
328        1/1                  gt_rob_rs.value2            = `XLEN'b0;
329        1/1                  gt_rob_rs.squash            = 1'b0;
330        1/1                  gt_rob_reg.dest_valid       = 1'b0;
331        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00100;
332        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
333        2/2                  @(negedge clock);
334        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
335                     
336                             // fill rob 0
337        1/1                  id_rob.PC                   = `XLEN'b1000;
338        1/1                  id_rob.dest_reg_idx         = 5'b00011;
339        1/1                  id_rob.dispatch_enable      = 1'b1;
340        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b11;
341        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b100;
342        1/1                  fu_rob.completed            = 1'b0;
343        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
344        1/1                  fu_rob.value                = `XLEN'b0;
345        1/1                  fu_rob.mis_pred             = 1'b0;
346                             
347        1/1                  gt_rob_rs.rob_tail          = 5'b00001;
348        1/1                  gt_rob_rs.value1            = `XLEN'b0;
349        1/1                  gt_rob_rs.value2            = `XLEN'b0;
350        1/1                  gt_rob_rs.squash            = 1'b0;
351        1/1                  gt_rob_reg.dest_valid       = 1'b0;
352        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00100;
353        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
354        2/2                  @(negedge clock);
355        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
356                     
357                             // fill rob 1
358        1/1                  id_rob.PC                   = `XLEN'b1001;
359        1/1                  id_rob.dest_reg_idx         = 5'b00110;
360        1/1                  id_rob.dispatch_enable      = 1'b1;
361        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b11;
362        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b100;
363        1/1                  fu_rob.completed            = 1'b0;
364        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
365        1/1                  fu_rob.value                = `XLEN'b0;
366        1/1                  fu_rob.mis_pred             = 1'b0;
367                             
368        1/1                  gt_rob_rs.rob_tail          = 5'b00010;
369        1/1                  gt_rob_rs.value1            = `XLEN'b0;
370        1/1                  gt_rob_rs.value2            = `XLEN'b0;
371        1/1                  gt_rob_rs.squash            = 1'b0;
372        1/1                  gt_rob_reg.dest_valid       = 1'b0;
373        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00100;
374        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
375        2/2                  @(negedge clock);
376        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
377                     
378                             // do nothing
379        1/1                  id_rob.PC                   = `XLEN'b1001;
380        1/1                  id_rob.dest_reg_idx         = 5'b00110;
381        1/1                  id_rob.dispatch_enable      = 1'b0;
382        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b11;
383        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b100;
384        1/1                  fu_rob.completed            = 1'b0;
385        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
386        1/1                  fu_rob.value                = `XLEN'b0;
387        1/1                  fu_rob.mis_pred             = 1'b0;
388                             
389        1/1                  gt_rob_rs.rob_tail          = 5'b00010;
390        1/1                  gt_rob_rs.value1            = `XLEN'b0;
391        1/1                  gt_rob_rs.value2            = `XLEN'b0;
392        1/1                  gt_rob_rs.squash            = 1'b0;
393        1/1                  gt_rob_reg.dest_valid       = 1'b0;
394        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00100;
395        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
396        2/2                  @(negedge clock);
397        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
398                     
399                     
400                             // // test complete
401                             // PC                  = 5;
402                             // dispatch_enable     = 0;
403                             // complete_enable     = 1;
404                             // complete_rob_entry  = 0;
405                             // dest_reg_idx        = 6;
406                             // value               = 156;
407                             // wrong_pred          = 0;
408                             // reqire_entry_idx    = 2;
409                             // @(negedge clock);
410                     
411                             // // test retire
412                             // PC                  = 5;
413                             // dispatch_enable     = 1;
414                             // complete_enable     = 0;
415                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
416                             // dest_reg_idx        = 6;
417                             // value               = `XLEN'b1;
418                             // wrong_pred          = 0;
419                             // reqire_entry_idx    = `ROB_IDX_LEN'b0;
420                             // @(negedge clock);
421                     
422                             // PC                  = 6;
423                             // dispatch_enable     = 1;
424                             // complete_enable     = 0;
425                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
426                             // dest_reg_idx        = 6;
427                             // value               = `XLEN'b1;
428                             // wrong_pred          = 0;
429                             // reqire_entry_idx    = 2;
430                             // @(negedge clock);
431                     
432                             // // test wrong pred
433                             // PC                  = 7;
434                             // dispatch_enable     = 1;
435                             // complete_enable     = 0;
436                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
437                             // dest_reg_idx        = 2;
438                             // value               = `XLEN'b1;
439                             // wrong_pred          = 1;
440                             // reqire_entry_idx    = 2;
441                             // @(negedge clock);
442                     
443                             // // test complete after wrong predect
444                             // PC                  = 8;
445                             // dispatch_enable     = 1;
446                             // complete_enable     = 1;
447                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
448                             // dest_reg_idx        = 6;
449                             // value               = `XLEN'b1;
450                             // wrong_pred          = 0;
451                             // reqire_entry_idx    = 2;
452                             // @(negedge clock);
453                     
454                             // PC                  = 9;
455                             // dispatch_enable     = 1;
456                             // complete_enable     = 1;
457                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
458                             // dest_reg_idx        = 6;
459                             // value               = `XLEN'b1;
460                             // wrong_pred          = 0;
461                             // reqire_entry_idx    = 2;
462                             // @(negedge clock);
463        1/1                  $display("@@@Passed");
464        1/1                  $finish;

-------------------------------------------------------------------------------
Toggle Coverage for Module : testbench
                Total Covered Percent 
Totals          33    11      33.33   
Total Bits      628   129     20.54   
Total Bits 0->1 314   68      21.66   
Total Bits 1->0 314   61      19.43   

                                
Signals          33  11  33.33  
Signal Bits      628 129 20.54  
Signal Bits 0->1 314 68  21.66  
Signal Bits 1->0 314 61  19.43  

Signal Details
                             Toggle Toggle 1->0 Toggle 0->1 
clock                        Yes    Yes         Yes         
reset                        No     Yes         No          
id_rob.dest_reg_idx[4:0]     Yes    Yes         Yes         
id_rob.dispatch_enable       Yes    Yes         Yes         
id_rob.PC[2:0]               Yes    Yes         Yes         
id_rob.PC[3]                 No     No          Yes         
id_rob.PC[31:4]              No     No          No          
rs_rob.entry_idx2[1:0]       Yes    Yes         Yes         
rs_rob.entry_idx2[2]         No     No          Yes         
rs_rob.entry_idx1[0]         Yes    Yes         Yes         
rs_rob.entry_idx1[1]         No     No          Yes         
rs_rob.entry_idx1[2]         No     No          No          
fu_rob.mis_pred              No     No          No          
fu_rob.value[3:0]            Yes    Yes         Yes         
fu_rob.value[31:4]           No     No          No          
fu_rob.entry_idx[0]          Yes    Yes         Yes         
fu_rob.entry_idx[2:1]        No     No          No          
fu_rob.completed             Yes    Yes         Yes         
rob_full                     No     No          Yes         
rob_rs.squash                No     No          No          
rob_rs.value2[1:0]           No     No          No          
rob_rs.value2[3:2]           Yes    Yes         Yes         
rob_rs.value2[31:4]          No     No          No          
rob_rs.value1[1:0]           No     No          No          
rob_rs.value1[3:2]           Yes    Yes         Yes         
rob_rs.value1[31:4]          No     No          No          
rob_rs.rob_tail[2:0]         Yes    Yes         Yes         
rob_mt.squash                No     No          No          
rob_mt.rob_tail[2:0]         Yes    Yes         Yes         
rob_reg.dest_value[3:0]      Yes    Yes         Yes         
rob_reg.dest_value[31:4]     No     No          No          
rob_reg.dest_reg_idx[1:0]    Yes    Yes         Yes         
rob_reg.dest_reg_idx[2]      No     No          Yes         
rob_reg.dest_reg_idx[4:3]    No     No          No          
rob_reg.dest_valid           Yes    Yes         Yes         
gt_rob_rs.squash             No     No          No          
gt_rob_rs.value2[1:0]        No     No          No          
gt_rob_rs.value2[3:2]        Yes    Yes         Yes         
gt_rob_rs.value2[31:4]       No     No          No          
gt_rob_rs.value1[1:0]        No     No          No          
gt_rob_rs.value1[3:2]        Yes    Yes         Yes         
gt_rob_rs.value1[31:4]       No     No          No          
gt_rob_rs.rob_tail[2:0]      Yes    Yes         Yes         
gt_rob_mt.squash             No     No          No          
gt_rob_mt.rob_tail[2:0]      Yes    Yes         Yes         
gt_rob_reg.dest_value[3:0]   Yes    Yes         Yes         
gt_rob_reg.dest_value[31:4]  No     No          No          
gt_rob_reg.dest_reg_idx[1:0] Yes    Yes         Yes         
gt_rob_reg.dest_reg_idx[2]   No     No          Yes         
gt_rob_reg.dest_reg_idx[4:3] No     No          No          
gt_rob_reg.dest_valid        Yes    Yes         Yes         
rob_head[0]                  Yes    Yes         Yes         
rob_head[1]                  No     No          Yes         
rob_head[2]                  No     No          No          
rob_tail[2:0]                Yes    Yes         Yes         
rob_counter[2:0]             Yes    Yes         Yes         
rob_counter[3]               No     No          Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE BRANCH 
 55.71  90.88 --      20.54 --     


Instance's subtree :

SCORE  LINE   COND   TOGGLE BRANCH 
 65.47  91.16  68.42  21.07  81.25 


Module : 

SCORE  LINE   COND   TOGGLE BRANCH NAME      
 55.71  90.88 --      20.54 --     testbench 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   COND   TOGGLE BRANCH NAME     
 66.29  93.75  68.42  21.76  81.25 test_rob 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : rob
===============================================================================
SCORE  LINE   COND   TOGGLE BRANCH 
 66.29  93.75  68.42  21.76  81.25 

Source File(s) : 

/afs/umich.edu/user/t/o/tonyztc/Desktop/group17w22/verilog/rob.sv

Module self-instances :

SCORE  LINE   COND   TOGGLE BRANCH NAME               
 66.29  93.75  68.42  21.76  81.25 testbench.test_rob 



-------------------------------------------------------------------------------
Line Coverage for Module : rob

             Line No.   Total   Covered  Percent
TOTAL                       32       30    93.75
ALWAYS             67        9        9   100.00
ALWAYS             87       23       21    91.30

66                          always_ff @(negedge clock) begin
67         1/1                  if(reset) begin
68         1/1                      cycle_count = 0;
69                              end
70                              else begin
71         1/1                      $display("DEBUG %4d: rob_empty = %b, retire_valid = %b, squash = %b", cycle_count, rob_empty, retire_valid, squash);
72         1/1                      $display("DEBUG %4d: rob_head = %d, rob_tail = %d, rob_counter = %d", cycle_count, rob_head, rob_tail, rob_counter);
73         1/1                      $display("DEBUG %4d: rob_reg = %p", cycle_count, rob_reg);
74                                  // TODO print only 5 for now
75         1/1                      for(int i = 0; i < 8; i += 1) begin
76                                      // For some reason pretty printing doesn't work if I index directly
77                                      ROB_ENTRY rob_entry;
78         1/1                          rob_entry = rob_entries[i];
79         1/1                          $display("DEBUG %4d: rob_entries[%2d] = %p", cycle_count, i,  rob_entry);
80                                  end
81         1/1                      cycle_count += 1;
82                              end
83                          end
84                          `endif
85                      
86                          always_ff @(posedge clock) begin
87         1/1                  if (reset) begin
88         1/1                      rob_head    <=  `SD `ROB_IDX_LEN'b0;
89         1/1                      rob_tail    <=  `SD `ROB_IDX_LEN'b0;
90         1/1                      rob_counter <=  `SD `ROB_IDX_LEN'b0;
91         1/1                      rob_entries <=  `SD 0;
92         1/1                  end else if (squash) begin
93         0/1     ==>              rob_head    <=  `SD rob_tail;
94         0/1     ==>              rob_counter <=  `SD `ROB_IDX_LEN'b0;
95                              end else begin
96         1/1                      if (id_rob.dispatch_enable) begin
97                                      // initalize rob entry
98         1/1                          rob_entries[rob_tail].PC                <=  `SD id_rob.PC;
99         1/1                          rob_entries[rob_tail].ready             <=  `SD 1'b0;
100        1/1                          rob_entries[rob_tail].dest_reg_idx      <=  `SD id_rob.dest_reg_idx;
101        1/1                          rob_entries[rob_tail].value             <=  `SD `XLEN'b0;
102        1/1                          rob_entries[rob_tail].mis_pred          <=  `SD 1'b0;
103        1/1                          rob_tail                                <=  `SD (rob_tail == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
104                                                                                                                 : rob_tail + 1;
105                                 end
                        MISSING_ELSE
106        1/1                      if (retire_valid) begin
107        1/1                          rob_entries[rob_head]                   <=  `SD 0;
108        1/1                          rob_head                                <=  `SD (rob_head == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
109                                                                                                                 : rob_head + 1;
110                                 end 
                        MISSING_ELSE
111        1/1                      if (fu_rob.completed) begin
112        1/1                          rob_entries[fu_rob.entry_idx].ready     <=  `SD 1'b1;
113        1/1                          rob_entries[fu_rob.entry_idx].value     <=  `SD fu_rob.value;
114        1/1                          rob_entries[fu_rob.entry_idx].mis_pred  <=  `SD fu_rob.mis_pred;
115                                 end
                        MISSING_ELSE
116        1/1                      rob_counter <=  `SD id_rob.dispatch_enable  ? (retire_valid ? rob_counter

-------------------------------------------------------------------------------
Cond Coverage for Module : rob

               Total   Covered  Percent
Conditions         19       13    68.42
Logical            19       13    68.42
Non-Logical         0        0
Event               0        0

 LINE       103
 EXPRESSION ((rob_tail == (8 - 1)) ? 3'b0 : ((rob_tail + 1)))
             ----------1----------

-1- Status
 0  Covered
 1  Covered

 LINE       108
 EXPRESSION ((rob_head == (8 - 1)) ? 3'b0 : ((rob_head + 1)))
             ----------1----------

-1- Status
 0  Covered
 1  Not Covered

 LINE       116
 EXPRESSION (id_rob.dispatch_enable ? (retire_valid ? rob_counter : ((rob_counter + 1))) : (retire_valid ? ((rob_counter - 1)) : rob_counter))
             -----------1----------

-1- Status
 0  Covered
 1  Covered

 LINE       116
 SUB-EXPRESSION (retire_valid ? rob_counter : ((rob_counter + 1)))
                 ------1-----

-1- Status
 0  Covered
 1  Covered

 LINE       116
 SUB-EXPRESSION (retire_valid ? ((rob_counter - 1)) : rob_counter)
                 ------1-----

-1- Status
 0  Covered
 1  Not Covered

 LINE       49
 EXPRESSION (rob_entries[rob_head].ready && ((~rob_empty)))
             -------------1-------------    -------2------

-1- -2- Status
 0   1  Covered
 1   0  Not Covered
 1   1  Covered

 LINE       50
 EXPRESSION (rob_entries[rob_head].mis_pred && retire_valid)
             ---------------1--------------    ------2-----

-1- -2- Status
 0   1  Covered
 1   0  Not Covered
 1   1  Not Covered

 LINE       60
 EXPRESSION (retire_valid && (rob_entries[rob_head].dest_reg_idx != 5'b0))
             ------1-----    ----------------------2---------------------

-1- -2- Status
 0   1  Covered
 1   0  Not Covered
 1   1  Covered

-------------------------------------------------------------------------------
Toggle Coverage for Module : rob
                Total Covered Percent 
Totals          28    9       32.14   
Total Bits      478   104     21.76   
Total Bits 0->1 239   55      23.01   
Total Bits 1->0 239   49      20.50   

                             
Ports          24  8  33.33  
Port Bits      408 94 23.04  
Port Bits 0->1 204 50 24.51  
Port Bits 1->0 204 44 21.57  

                              
Signals          4  1  25.00  
Signal Bits      70 10 14.29  
Signal Bits 0->1 35 5  14.29  
Signal Bits 1->0 35 5  14.29  

Port Details
                          Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                     Yes    Yes         Yes         INPUT     
reset                     No     Yes         No          INPUT     
id_rob.dest_reg_idx[4:0]  Yes    Yes         Yes         INPUT     
id_rob.dispatch_enable    Yes    Yes         Yes         INPUT     
id_rob.PC[2:0]            Yes    Yes         Yes         INPUT     
id_rob.PC[3]              No     No          Yes         INPUT     
id_rob.PC[31:4]           No     No          No          INPUT     
rs_rob.entry_idx2[1:0]    Yes    Yes         Yes         INPUT     
rs_rob.entry_idx2[2]      No     No          Yes         INPUT     
rs_rob.entry_idx1[0]      Yes    Yes         Yes         INPUT     
rs_rob.entry_idx1[1]      No     No          Yes         INPUT     
rs_rob.entry_idx1[2]      No     No          No          INPUT     
fu_rob.mis_pred           No     No          No          INPUT     
fu_rob.value[3:0]         Yes    Yes         Yes         INPUT     
fu_rob.value[31:4]        No     No          No          INPUT     
fu_rob.entry_idx[0]       Yes    Yes         Yes         INPUT     
fu_rob.entry_idx[2:1]     No     No          No          INPUT     
fu_rob.completed          Yes    Yes         Yes         INPUT     
rob_full                  No     No          Yes         OUTPUT    
rob_rs.squash             No     No          No          OUTPUT    
rob_rs.value2[1:0]        No     No          No          OUTPUT    
rob_rs.value2[3:2]        Yes    Yes         Yes         OUTPUT    
rob_rs.value2[31:4]       No     No          No          OUTPUT    
rob_rs.value1[1:0]        No     No          No          OUTPUT    
rob_rs.value1[3:2]        Yes    Yes         Yes         OUTPUT    
rob_rs.value1[31:4]       No     No          No          OUTPUT    
rob_rs.rob_tail[2:0]      Yes    Yes         Yes         OUTPUT    
rob_mt.squash             No     No          No          OUTPUT    
rob_mt.rob_tail[2:0]      Yes    Yes         Yes         OUTPUT    
rob_reg.dest_value[3:0]   Yes    Yes         Yes         OUTPUT    
rob_reg.dest_value[31:4]  No     No          No          OUTPUT    
rob_reg.dest_reg_idx[1:0] Yes    Yes         Yes         OUTPUT    
rob_reg.dest_reg_idx[2]   No     No          Yes         OUTPUT    
rob_reg.dest_reg_idx[4:3] No     No          No          OUTPUT    
rob_reg.dest_valid        Yes    Yes         Yes         OUTPUT    
rob_head[0]               Yes    Yes         Yes         OUTPUT    
rob_head[1]               No     No          Yes         OUTPUT    
rob_head[2]               No     No          No          OUTPUT    
rob_tail[2:0]             Yes    Yes         Yes         OUTPUT    
rob_counter[2:0]          Yes    Yes         Yes         OUTPUT    
rob_counter[3]            No     No          Yes         OUTPUT    

Signal Details
                  Toggle Toggle 1->0 Toggle 0->1 
rob_empty         No     Yes         No          
retire_valid      Yes    Yes         Yes         
squash            No     No          No          
cycle_count[2:0]  Yes    Yes         Yes         
cycle_count[3]    No     No          Yes         
cycle_count[31:4] No     No          No          


-------------------------------------------------------------------------------
Branch Coverage for Module : rob
         Line No. Total Covered Percent 
Branches          16    13      81.25   
IF       67       2     2       100.00  
IF       87       14    11      78.57   


67                 if(reset) begin
                   -1-  
68                     cycle_count = 0;
                       ==>
69                 end
70                 else begin
71                     $display("DEBUG %4d: rob_empty = %b, retire_valid = %b, squash = %b", cycle_count, rob_empty, retire_valid, squash);
                       ==>

Branches:

-1- Status  
1   Covered 
0   Covered 


87                 if (reset) begin
                   -1-  
88                     rob_head    <=  `SD `ROB_IDX_LEN'b0;
                       ==>
89                     rob_tail    <=  `SD `ROB_IDX_LEN'b0;
90                     rob_counter <=  `SD `ROB_IDX_LEN'b0;
91                     rob_entries <=  `SD 0;
92                 end else if (squash) begin
                            -2-  
93                     rob_head    <=  `SD rob_tail;
                       ==>
94                     rob_counter <=  `SD `ROB_IDX_LEN'b0;
95                 end else begin
96                     if (id_rob.dispatch_enable) begin
                       -3-  
97                         // initalize rob entry
98                         rob_entries[rob_tail].PC                <=  `SD id_rob.PC;
99                         rob_entries[rob_tail].ready             <=  `SD 1'b0;
100                        rob_entries[rob_tail].dest_reg_idx      <=  `SD id_rob.dest_reg_idx;
101                        rob_entries[rob_tail].value             <=  `SD `XLEN'b0;
102                        rob_entries[rob_tail].mis_pred          <=  `SD 1'b0;
103                        rob_tail                                <=  `SD (rob_tail == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
                                                                                                       -4-  
                                                                                                       ==>  
                                                                                                       ==>  
104                                                                                                    : rob_tail + 1;
105                    end
                       MISSING_ELSE
                       ==>
106                    if (retire_valid) begin
                       -5-  
107                        rob_entries[rob_head]                   <=  `SD 0;
108                        rob_head                                <=  `SD (rob_head == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
                                                                                                       -6-  
                                                                                                       ==>  
                                                                                                       ==>  
109                                                                                                    : rob_head + 1;
110                    end 
                       MISSING_ELSE
                       ==>
111                    if (fu_rob.completed) begin
                       -7-  
112                        rob_entries[fu_rob.entry_idx].ready     <=  `SD 1'b1;
                           ==>
113                        rob_entries[fu_rob.entry_idx].value     <=  `SD fu_rob.value;
114                        rob_entries[fu_rob.entry_idx].mis_pred  <=  `SD fu_rob.mis_pred;
115                    end
                       MISSING_ELSE
                       ==>
116                    rob_counter <=  `SD id_rob.dispatch_enable  ? (retire_valid ? rob_counter
                                                                   -8-             -9-   
                                                                                   ==>  
                                                                                   ==>  
117                                                                                : rob_counter + 1)
                                                                                                     
118                                                                : (retire_valid ? rob_counter - 1
                                                                                   -10-  
                                                                                   ==>  
                                                                                   ==>  

Branches:

-1- -2- -3- -4- -5- -6- -7- -8- -9- -10- Status      
1   -   -   -   -   -   -   -   -   -    Covered     
0   1   -   -   -   -   -   -   -   -    Not Covered 
0   0   1   1   -   -   -   -   -   -    Covered     
0   0   1   0   -   -   -   -   -   -    Covered     
0   0   0   -   -   -   -   -   -   -    Covered     
0   0   -   -   1   1   -   -   -   -    Not Covered 
0   0   -   -   1   0   -   -   -   -    Covered     
0   0   -   -   0   -   -   -   -   -    Covered     
0   0   -   -   -   -   1   -   -   -    Covered     
0   0   -   -   -   -   0   -   -   -    Covered     
0   0   -   -   -   -   -   1   1   -    Covered     
0   0   -   -   -   -   -   1   0   -    Covered     
0   0   -   -   -   -   -   0   -   1    Not Covered 
0   0   -   -   -   -   -   0   -   0    Covered     


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.test_rob
===============================================================================

Instance :

SCORE  LINE   COND   TOGGLE BRANCH 
 66.29  93.75  68.42  21.76  81.25 


Instance's subtree :

SCORE  LINE   COND   TOGGLE BRANCH 
 66.29  93.75  68.42  21.76  81.25 


Module : 

SCORE  LINE   COND   TOGGLE BRANCH NAME 
 66.29  93.75  68.42  21.76  81.25 rob  


Parent : 

SCORE  LINE   COND   TOGGLE BRANCH NAME      
 55.71  90.88 --      20.54 --     testbench 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
