===============================================================================
Module : testbench
===============================================================================
SCORE  LINE   TOGGLE 
 39.60  75.00   4.20 

Source File(s) : 

/afs/umich.edu/user/t/o/tonyztc/Desktop/group17w22/testbench/test_rob.sv

Module self-instances :

SCORE  LINE   TOGGLE NAME      
 39.60  75.00   4.20 testbench 



-------------------------------------------------------------------------------
Line Coverage for Module : testbench

             Line No.   Total   Covered  Percent
TOTAL                      108       81    75.00
ALWAYS             46        2        2   100.00
ROUTINE            61       40       13    32.50
INITIAL           119       66       66   100.00

45                      
46         2/2              always #5 clock = ~clock;
47                      
48                          task check;
49                              input ID_ROB_PACKET   id_rob;
50                              input RS_ROB_PACKET   rs_rob;
51                              input FU_ROB_PACKET   fu_rob;
52                              // input logic           rob_full;
53                              input ROB_RS_PACKET   rob_rs;
54                              input ROB_MT_PACKET   rob_mt;
55                              input ROB_REG_PACKET  rob_reg;
56                              input ROB_RS_PACKET   gt_rob_rs;
57                              input ROB_MT_PACKET   gt_rob_mt;
58                              input ROB_REG_PACKET  gt_rob_reg;
59                              begin
60                                  logic   flag;
61         1/1                      flag = 1'b0;
62         1/1                      if (rob_rs.rob_tail != gt_rob_rs.rob_tail) begin
63         0/1     ==>                  $display("@@@ Incorrect rob_rs.rob_tail at time %4.0f", $time);
64         0/1     ==>                  flag = 1'b1;
65                                  end
                        MISSING_ELSE
66         1/1                      if (rob_rs.value1 != gt_rob_rs.value1) begin
67         0/1     ==>                  $display("@@@ Incorrect rob_rs.value1 at time %4.0f", $time);
68         0/1     ==>                  flag = 1'b1;
69                                  end
                        MISSING_ELSE
70         1/1                      if (rob_rs.value2 != gt_rob_rs.value2) begin
71         0/1     ==>                  $display("@@@ Incorrect rob_rs.value2 at time %4.0f", $time);
72         0/1     ==>                  flag = 1'b1;
73                                  end
                        MISSING_ELSE
74         1/1                      if (rob_rs.squash != gt_rob_rs.squash) begin
75         0/1     ==>                  $display("@@@ Incorrect rob_rs.squash at time %4.0f", $time);
76         0/1     ==>                  flag = 1'b1;
77                                  end
                        MISSING_ELSE
78         1/1                      if (rob_mt.rob_tail != gt_rob_mt.rob_tail) begin
79         0/1     ==>                  $display("@@@ Incorrect rob_mt.rob_tail at time %4.0f", $time);
80         0/1     ==>                  flag = 1'b1;
81                                  end
                        MISSING_ELSE
82         1/1                      if (rob_mt.squash != gt_rob_mt.squash) begin
83         0/1     ==>                  $display("@@@ Incorrect rob_mt.squash at time %4.0f", $time);
84         0/1     ==>                  flag = 1'b1;
85                                  end
                        MISSING_ELSE
86         1/1                      if (rob_reg.dest_valid != gt_rob_reg.dest_valid) begin
87         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_valid at time %4.0f", $time);
88         0/1     ==>                  flag = 1'b1;
89                                  end
                        MISSING_ELSE
90         1/1                      if (rob_reg.dest_reg_idx != gt_rob_reg.dest_reg_idx) begin
91         0/1     ==>                  $display("reg_idx", gt_rob_reg.dest_reg_idx);
92         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_reg_idx at time %4.0f", $time);
93         0/1     ==>                  flag = 1'b1;
94                                  end
                        MISSING_ELSE
95         1/1                      if (rob_reg.dest_value != gt_rob_reg.dest_value) begin
96         0/1     ==>                  $display("@@@ Incorrect rob_reg.dest_value at time %4.0f", $time);
97         0/1     ==>                  flag = 1'b1;
98                                  end
                        MISSING_ELSE
99                      
100        2/2                      #1;
101        1/1                      if (flag) begin
102        0/1     ==>                  $display("id_rob:  %p", id_rob);
103        0/1     ==>                  $display("rs_rob:  %p", rs_rob);
104        0/1     ==>                  $display("fu_rob:  %p", fu_rob);
105        0/1     ==>                  $display("rob_rs:  %p", rob_rs);
106        0/1     ==>                  $display("rob_mt:  %p", rob_mt);
107        0/1     ==>                  $display("rob_reg: %p", rob_reg);
108                     
109        0/1     ==>                  $display("@@@ Failed at time %f", $time);
110        0/1     ==>                  $finish;
111                                 end
                        MISSING_ELSE
112                             end
113                         endtask
114                     
115                         assign gt_rob_mt.rob_tail       = gt_rob_rs.rob_tail;
116                         assign gt_rob_mt.squash         = gt_rob_rs.squash;
117                     
118                         initial begin
119        1/1                  $monitor("time: %3.0d head: %2.0d tail: %2.0d counter: %2.0d ", $time, rob_head, rob_tail, rob_counter);
120        1/1                  clock = 0;
121                     
122                             // reset
123        1/1                  reset                       = 1;
124        1/1                  id_rob.PC                   = `XLEN'b0;
125        1/1                  id_rob.dispatch_enable      = 1'b0;
126        1/1                  id_rob.dest_reg_idx         = 5'b0;
127        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
128        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
129        1/1                  fu_rob.completed            = 1'b0;
130        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
131        1/1                  fu_rob.value                = `XLEN'b0;
132        1/1                  fu_rob.mis_pred             = 1'b0;
133                     
134        1/1                  gt_rob_rs.rob_tail          = 5'b00000;
135        1/1                  gt_rob_rs.value1            = `XLEN'b0;
136        1/1                  gt_rob_rs.value2            = `XLEN'b0;
137        1/1                  gt_rob_rs.squash            = 1'b0;
138        1/1                  gt_rob_reg.dest_valid       = 1'b0;
139        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00000;
140        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
141                     
142        2/2                  @(negedge clock);
143        1/1                  reset = 0;
144        2/2                  @(negedge clock);
145                             // check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
146                             
147                             // test dispatch
148        1/1                  id_rob.PC                   = `XLEN'b0;
149        1/1                  id_rob.dest_reg_idx         = 5'b00011;
150        1/1                  id_rob.dispatch_enable      = 1'b1;
151        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
152        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
153        1/1                  fu_rob.completed            = 1'b0;
154        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
155        1/1                  fu_rob.value                = `XLEN'b0;
156        1/1                  fu_rob.mis_pred             = 1'b0;
157                             
158        1/1                  gt_rob_rs.rob_tail          = 5'b1;
159        1/1                  gt_rob_rs.value1            = `XLEN'b0;
160        1/1                  gt_rob_rs.value2            = `XLEN'b0;
161        1/1                  gt_rob_rs.squash            = 1'b0;
162        1/1                  gt_rob_reg.dest_valid       = 1'b0;
163        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
164        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
165        2/2                  @(negedge clock);
166        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);        
167                             
168                             // test dispatch
169        1/1                  id_rob.PC                   = `XLEN'b1;
170        1/1                  id_rob.dest_reg_idx         = 5'b00010;
171        1/1                  id_rob.dispatch_enable      = 1'b1;
172        1/1                  rs_rob.entry_idx1           = `ROB_IDX_LEN'b0;
173        1/1                  rs_rob.entry_idx2           = `ROB_IDX_LEN'b0;
174        1/1                  fu_rob.completed            = 1'b0;
175        1/1                  fu_rob.entry_idx            = `ROB_IDX_LEN'b0;
176        1/1                  fu_rob.value                = `XLEN'b0;
177        1/1                  fu_rob.mis_pred             = 1'b0;
178                             
179        1/1                  gt_rob_rs.rob_tail          = 5'b00010;
180        1/1                  gt_rob_rs.value1            = `XLEN'b0;
181        1/1                  gt_rob_rs.value2            = `XLEN'b0;
182        1/1                  gt_rob_rs.squash            = 1'b0;
183        1/1                  gt_rob_reg.dest_valid       = 1'b0;
184        1/1                  gt_rob_reg.dest_reg_idx     = 5'b00011;
185        1/1                  gt_rob_reg.dest_value       = `XLEN'b0;
186        2/2                  @(negedge clock);
187        1/1                  check(id_rob, rs_rob, fu_rob, rob_rs, rob_mt, rob_reg, gt_rob_rs, gt_rob_mt, gt_rob_reg);
188        2/2                  @(negedge clock);
189                     
190                             // PC                  = 2;
191                             // dispatch_enable     = 1;
192                             // complete_enable     = 0;
193                             // complete_rob_entry  = `ROB_IDX_LEN'b0;
194                             // dest_reg_idx        = 2;
195                             // value               = `XLEN'b0;
196                             // wrong_pred          = 0;
197                             // reqire_entry_idx    = `ROB_IDX_LEN'b0;
198                             // @(negedge clock);
199                     
200                             //// // test dispatch
201                             //// PC                  = 3;
202                             //// dispatch_enable     = 1;
203                             //// complete_enable     = 0;
204                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
205                             //// dest_reg_idx        = 3;
206                             //// value               = `XLEN'b0;
207                             //// wrong_pred          = 0;
208                             //// reqire_entry_idx    = `ROB_IDX_LEN'b0;
209                             //// @(negedge clock);
210                     
211                             //// // test complete
212                             //// PC                  = 4;
213                             //// dispatch_enable     = 1;
214                             //// complete_enable     = 1;
215                             //// complete_rob_entry  = 2;
216                             //// dest_reg_idx        = 2;
217                             //// value               = `XLEN'b1;
218                             //// wrong_pred          = 0;
219                             //// reqire_entry_idx    = `ROB_IDX_LEN'b0;
220                             //// @(negedge clock);
221                     
222                             //// // test complete
223                             //// PC                  = 5;
224                             //// dispatch_enable     = 0;
225                             //// complete_enable     = 1;
226                             //// complete_rob_entry  = 0;
227                             //// dest_reg_idx        = 6;
228                             //// value               = 156;
229                             //// wrong_pred          = 0;
230                             //// reqire_entry_idx    = 2;
231                             //// @(negedge clock);
232                     
233                             //// // test retire
234                             //// PC                  = 5;
235                             //// dispatch_enable     = 1;
236                             //// complete_enable     = 0;
237                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
238                             //// dest_reg_idx        = 6;
239                             //// value               = `XLEN'b1;
240                             //// wrong_pred          = 0;
241                             //// reqire_entry_idx    = `ROB_IDX_LEN'b0;
242                             //// @(negedge clock);
243                     
244                             //// PC                  = 6;
245                             //// dispatch_enable     = 1;
246                             //// complete_enable     = 0;
247                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
248                             //// dest_reg_idx        = 6;
249                             //// value               = `XLEN'b1;
250                             //// wrong_pred          = 0;
251                             //// reqire_entry_idx    = 2;
252                             //// @(negedge clock);
253                     
254                             //// // test wrong pred
255                             //// PC                  = 7;
256                             //// dispatch_enable     = 1;
257                             //// complete_enable     = 0;
258                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
259                             //// dest_reg_idx        = 2;
260                             //// value               = `XLEN'b1;
261                             //// wrong_pred          = 1;
262                             //// reqire_entry_idx    = 2;
263                             //// @(negedge clock);
264                     
265                             //// // test complete after wrong predect
266                             //// PC                  = 8;
267                             //// dispatch_enable     = 1;
268                             //// complete_enable     = 1;
269                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
270                             //// dest_reg_idx        = 6;
271                             //// value               = `XLEN'b1;
272                             //// wrong_pred          = 0;
273                             //// reqire_entry_idx    = 2;
274                             //// @(negedge clock);
275                     
276                             //// PC                  = 9;
277                             //// dispatch_enable     = 1;
278                             //// complete_enable     = 1;
279                             //// complete_rob_entry  = `ROB_IDX_LEN'b0;
280                             //// dest_reg_idx        = 6;
281                             //// value               = `XLEN'b1;
282                             //// wrong_pred          = 0;
283                             //// reqire_entry_idx    = 2;
284                             //// @(negedge clock);
285        1/1                  $display("@@@Passed");
286        1/1                  $finish;

-------------------------------------------------------------------------------
Toggle Coverage for Module : testbench
                Total Covered Percent 
Totals          33    1       3.03    
Total Bits      666   28      4.20    
Total Bits 0->1 333   19      5.71    
Total Bits 1->0 333   9       2.70    

                               
Signals          33  1  3.03   
Signal Bits      666 28 4.20   
Signal Bits 0->1 333 19 5.71   
Signal Bits 1->0 333 9  2.70   

Signal Details
                             Toggle Toggle 1->0 Toggle 0->1 
clock                        Yes    Yes         Yes         
reset                        No     Yes         No          
id_rob.dest_reg_idx[0]       Yes    Yes         Yes         
id_rob.dest_reg_idx[1]       No     No          Yes         
id_rob.dest_reg_idx[4:2]     No     No          No          
id_rob.dispatch_enable       No     No          Yes         
id_rob.PC[0]                 No     No          Yes         
id_rob.PC[31:1]              No     No          No          
rs_rob.entry_idx2[4:0]       No     No          No          
rs_rob.entry_idx1[4:0]       No     No          No          
fu_rob.mis_pred              No     No          No          
fu_rob.value[31:0]           No     No          No          
fu_rob.entry_idx[4:0]        No     No          No          
fu_rob.completed             No     No          No          
rob_full                     No     No          No          
rob_rs.squash                No     No          No          
rob_rs.value2[31:0]          No     No          No          
rob_rs.value1[31:0]          No     No          No          
rob_rs.rob_tail[0]           Yes    Yes         Yes         
rob_rs.rob_tail[1]           No     No          Yes         
rob_rs.rob_tail[4:2]         No     No          No          
rob_mt.squash                No     No          No          
rob_mt.rob_tail[0]           Yes    Yes         Yes         
rob_mt.rob_tail[1]           No     No          Yes         
rob_mt.rob_tail[4:2]         No     No          No          
rob_reg.dest_value[31:0]     No     No          No          
rob_reg.dest_reg_idx[4:0]    No     No          No          
rob_reg.dest_valid           No     No          No          
gt_rob_rs.squash             No     No          No          
gt_rob_rs.value2[31:0]       No     No          No          
gt_rob_rs.value1[31:0]       No     No          No          
gt_rob_rs.rob_tail[0]        Yes    Yes         Yes         
gt_rob_rs.rob_tail[1]        No     No          Yes         
gt_rob_rs.rob_tail[4:2]      No     No          No          
gt_rob_mt.squash             No     No          No          
gt_rob_mt.rob_tail[0]        Yes    Yes         Yes         
gt_rob_mt.rob_tail[1]        No     No          Yes         
gt_rob_mt.rob_tail[4:2]      No     No          No          
gt_rob_reg.dest_value[31:0]  No     No          No          
gt_rob_reg.dest_reg_idx[1:0] No     No          Yes         
gt_rob_reg.dest_reg_idx[4:2] No     No          No          
gt_rob_reg.dest_valid        No     No          No          
rob_head[4:0]                No     No          No          
rob_tail[0]                  Yes    Yes         Yes         
rob_tail[1]                  No     No          Yes         
rob_tail[4:2]                No     No          No          
rob_counter[0]               Yes    Yes         Yes         
rob_counter[1]               No     No          Yes         
rob_counter[4:2]             No     No          No          


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench
===============================================================================

Instance :

SCORE  LINE   TOGGLE 
 39.60  75.00   4.20 


Instance's subtree :

SCORE  LINE   TOGGLE 
 40.34  76.09   4.60 


Module : 

SCORE  LINE   TOGGLE NAME      
 39.60  75.00   4.20 testbench 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   TOGGLE NAME     
 42.56  80.00   5.12 test_rob 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : rob
===============================================================================
SCORE  LINE   TOGGLE 
 42.56  80.00   5.12 

Source File(s) : 

/afs/umich.edu/user/t/o/tonyztc/Desktop/group17w22/verilog/rob.sv

Module self-instances :

SCORE  LINE   TOGGLE NAME               
 42.56  80.00   5.12 testbench.test_rob 



-------------------------------------------------------------------------------
Line Coverage for Module : rob

             Line No.   Total   Covered  Percent
TOTAL                       30       24    80.00
ALWAYS             67        9        9   100.00
ALWAYS             87       21       15    71.43

66                          always_ff @(negedge clock) begin
67         1/1                  if(reset) begin
68         1/1                      cycle_count = 0;
69                              end
70                              else begin
71         1/1                      $display("DEBUG %4d: rob_empty = %b, retire_valid = %b, squash = %b", cycle_count, rob_empty, retire_valid, squash);
72         1/1                      $display("DEBUG %4d: rob_head = %d, rob_tail = %d, rob_counter = %d", cycle_count, rob_head, rob_tail, rob_counter);
73         1/1                      $display("DEBUG %4d: rob_reg = %p", cycle_count, rob_reg);
74                                  // TODO print only 5 for now
75         1/1                      for(int i = 0; i < 5; i += 1) begin
76                                      // For some reason pretty printing doesn't work if I index directly
77                                      ROB_ENTRY rob_entry;
78         1/1                          rob_entry = rob_entries[i];
79         1/1                          $display("DEBUG %4d: rob_entries[%2d] = %p", cycle_count, i,  rob_entry);
80                                  end
81         1/1                      cycle_count += 1;
82                              end
83                          end
84                          `endif
85                      
86                          always_ff @(posedge clock) begin
87         1/1                  if (reset) begin
88         1/1                      rob_head    <=  `SD `ROB_IDX_LEN'b0;
89         1/1                      rob_tail    <=  `SD `ROB_IDX_LEN'b0;
90         1/1                      rob_counter <=  `SD `ROB_IDX_LEN'b0;
91         1/1                  end else if (squash) begin
92         0/1     ==>              rob_head    <=  `SD rob_tail;
93         0/1     ==>              rob_counter <=  `SD `ROB_IDX_LEN'b0;
94                              end else begin
95         1/1                      if (id_rob.dispatch_enable) begin
96                                      // initalize rob entry
97         1/1                          rob_entries[rob_tail].PC                <=  `SD id_rob.PC;
98         1/1                          rob_entries[rob_tail].ready             <=  `SD 1'b0;
99         1/1                          rob_entries[rob_tail].dest_reg_idx      <=  `SD id_rob.dest_reg_idx;
100        1/1                          rob_entries[rob_tail].value             <=  `SD `XLEN'b0;
101        1/1                          rob_entries[rob_tail].mis_pred          <=  `SD 1'b0;
102        1/1                          rob_tail                                <=  `SD (rob_tail == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
103                                                                                                                 : rob_tail + 1;
104                                 end
                        MISSING_ELSE
105        1/1                      if (retire_valid) begin
106        0/1     ==>                  rob_head                                <=  `SD (rob_head == `ROB_SIZE - 1) ? `ROB_IDX_LEN'b0
107                                                                                                                 : rob_head + 1;
108                                 end 
                        MISSING_ELSE
109        1/1                      if (fu_rob.completed) begin
110        0/1     ==>                  rob_entries[fu_rob.entry_idx].ready     <=  `SD 1'b1;
111        0/1     ==>                  rob_entries[fu_rob.entry_idx].value     <=  `SD fu_rob.value;
112        0/1     ==>                  rob_entries[fu_rob.entry_idx].mis_pred  <=  `SD fu_rob.mis_pred;
113                                 end
                        MISSING_ELSE
114        1/1                      rob_counter <=  `SD id_rob.dispatch_enable  ? (retire_valid ? rob_counter

-------------------------------------------------------------------------------
Toggle Coverage for Module : rob
                Total Covered Percent 
Totals          28    1       3.57    
Total Bits      508   26      5.12    
Total Bits 0->1 254   16      6.30    
Total Bits 1->0 254   10      3.94    

                             
Ports          24  1  4.17   
Port Bits      438 20 4.57   
Port Bits 0->1 219 13 5.94   
Port Bits 1->0 219 7  3.20   

                             
Signals          4  0 0.00   
Signal Bits      70 6 8.57   
Signal Bits 0->1 35 3 8.57   
Signal Bits 1->0 35 3 8.57   

Port Details
                          Toggle Toggle 1->0 Toggle 0->1 Direction 
clock                     Yes    Yes         Yes         INPUT     
reset                     No     Yes         No          INPUT     
id_rob.dest_reg_idx[0]    Yes    Yes         Yes         INPUT     
id_rob.dest_reg_idx[1]    No     No          Yes         INPUT     
id_rob.dest_reg_idx[4:2]  No     No          No          INPUT     
id_rob.dispatch_enable    No     No          Yes         INPUT     
id_rob.PC[0]              No     No          Yes         INPUT     
id_rob.PC[31:1]           No     No          No          INPUT     
rs_rob.entry_idx2[4:0]    No     No          No          INPUT     
rs_rob.entry_idx1[4:0]    No     No          No          INPUT     
fu_rob.mis_pred           No     No          No          INPUT     
fu_rob.value[31:0]        No     No          No          INPUT     
fu_rob.entry_idx[4:0]     No     No          No          INPUT     
fu_rob.completed          No     No          No          INPUT     
rob_full                  No     No          No          OUTPUT    
rob_rs.squash             No     No          No          OUTPUT    
rob_rs.value2[31:0]       No     No          No          OUTPUT    
rob_rs.value1[31:0]       No     No          No          OUTPUT    
rob_rs.rob_tail[0]        Yes    Yes         Yes         OUTPUT    
rob_rs.rob_tail[1]        No     No          Yes         OUTPUT    
rob_rs.rob_tail[4:2]      No     No          No          OUTPUT    
rob_mt.squash             No     No          No          OUTPUT    
rob_mt.rob_tail[0]        Yes    Yes         Yes         OUTPUT    
rob_mt.rob_tail[1]        No     No          Yes         OUTPUT    
rob_mt.rob_tail[4:2]      No     No          No          OUTPUT    
rob_reg.dest_value[31:0]  No     No          No          OUTPUT    
rob_reg.dest_reg_idx[4:0] No     No          No          OUTPUT    
rob_reg.dest_valid        No     No          No          OUTPUT    
rob_head[4:0]             No     No          No          OUTPUT    
rob_tail[0]               Yes    Yes         Yes         OUTPUT    
rob_tail[1]               No     No          Yes         OUTPUT    
rob_tail[4:2]             No     No          No          OUTPUT    
rob_counter[0]            Yes    Yes         Yes         OUTPUT    
rob_counter[1]            No     No          Yes         OUTPUT    
rob_counter[4:2]          No     No          No          OUTPUT    

Signal Details
                  Toggle Toggle 1->0 Toggle 0->1 
rob_empty         No     Yes         No          
retire_valid      No     No          No          
squash            No     No          No          
cycle_count[1:0]  Yes    Yes         Yes         
cycle_count[2]    No     No          Yes         
cycle_count[31:3] No     No          No          


-------------------------------------------------------------------------------
===============================================================================
Module Instance : testbench.test_rob
===============================================================================

Instance :

SCORE  LINE   TOGGLE 
 42.56  80.00   5.12 


Instance's subtree :

SCORE  LINE   TOGGLE 
 42.56  80.00   5.12 


Module : 

SCORE  LINE   TOGGLE NAME 
 42.56  80.00   5.12 rob  


Parent : 

SCORE  LINE   TOGGLE NAME      
 39.60  75.00   4.20 testbench 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
